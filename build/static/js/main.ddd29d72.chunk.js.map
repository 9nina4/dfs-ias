{"version":3,"sources":["logo.svg","fire.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","props","state","messages","database","ref","orderByKey","limitToLast","on","snapshot","message","text","val","id","key","setState","concat","e","preventDefault","push","this","inputEl","value","onSubmit","addMessage","bind","type","el","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,oICc5BC,E,OADJC,EAASC,cAXC,CACjBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBC6BJC,E,kDAlCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,SAAU,IAFR,E,iEAIE,IAAD,OAEAd,EAAKe,WAAWC,IAAI,YAAYC,aAAaC,YAAY,KAC/DC,GAAG,eAAe,SAAAC,GAE5B,IAAIC,EAAU,CAAEC,KAAMF,EAASG,MAAOC,GAAIJ,EAASK,KACnD,EAAKC,SAAS,CAAEZ,SAAU,CAACO,GAASM,OAAO,EAAKd,MAAMC,iB,iCAG/Cc,GACTA,EAAEC,iBAEF7B,EAAKe,WAAWC,IAAI,YAAYc,KAAMC,KAAKC,QAAQC,OACnDF,KAAKC,QAAQC,MAAQ,K,+BAEb,IAAD,OACP,OACE,0BAAMC,SAAUH,KAAKI,WAAWC,KAAKL,OACnC,2BAAOM,KAAK,OAAOrB,IAAM,SAAAsB,GAAE,OAAI,EAAKN,QAAUM,KAC9C,2BAAOD,KAAK,WACZ,4BAEIN,KAAKlB,MAAMC,SAASyB,KAAK,SAAAlB,GAAO,OAAI,wBAAII,IAAKJ,EAAQG,IAAKH,EAAQC,e,GA3B5DkB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMrC,c","file":"static/js/main.ddd29d72.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyB1T2X2CL_Bl4ulaksrby5i-RJ6edIkyHw\",\r\n    authDomain: \"dreamsforschools-ias.firebaseapp.com\",\r\n    databaseURL: \"https://dreamsforschools-ias.firebaseio.com\",\r\n    projectId: \"dreamsforschools-ias\",\r\n    storageBucket: \"dreamsforschools-ias.appspot.com\",\r\n    messagingSenderId: \"382060190581\",\r\n    appId: \"1:382060190581:web:f6b0924fd60a445884d13c\",\r\n    measurementId: \"G-G0NHPPBQHJ\"\r\n  };\r\n  // Initialize Firebase\r\nvar fire = firebase.initializeApp(firebaseConfig);\r\nexport default fire;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport fire from './fire';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { messages: [] }; // <- set up react state\n  }\n  componentWillMount(){\n    /* Create reference to messages in Firebase Database */\n    let messagesRef = fire.database().ref('messages').orderByKey().limitToLast(100);\n    messagesRef.on('child_added', snapshot => {\n      /* Update React state when message is added at Firebase Database */\n      let message = { text: snapshot.val(), id: snapshot.key };\n      this.setState({ messages: [message].concat(this.state.messages) });\n    })\n  }\n  addMessage(e){\n    e.preventDefault(); // <- prevent form submit from reloading the page\n    /* Send the message to Firebase */\n    fire.database().ref('messages').push( this.inputEl.value );\n    this.inputEl.value = ''; // <- clear the input\n  }\n  render() {\n    return (\n      <form onSubmit={this.addMessage.bind(this)}>\n        <input type=\"text\" ref={ el => this.inputEl = el }/>\n        <input type=\"submit\"/>\n        <ul>\n          { /* Render the list of messages */\n            this.state.messages.map( message => <li key={message.id}>{message.text}</li> )\n          }\n        </ul>\n      </form>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}